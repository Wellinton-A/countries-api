import Head from 'next/head'
import Image from 'next/image'
import { useContext, useEffect, useState } from 'react'

import { DarkModeContext } from '@/context/darkMode.context'

import GlobalStyle from '@/styles/GlobalStyle'

import searchIconLight from '../assets/icons8-search-black24.png'
import searchIconDarnk from '../assets/icons8-search-white24.png'
import arrowDownLight from '../assets/icons8-down-black24.png'
import arrowDownDark from '../assets/icons8-down-white24.png'

import * as S from '@/styles/style'
import Card from '@/components/Country-Card'

import path from 'path'
import fs from 'fs/promises'
import process from 'process'

export const font = "'Nunito Sans', sans-serif"

export type CountryData = {
  name: string
  nativeName: string
  region: string
  subregion: string
  capital: string
  population: number
  topLevelDomain: string[]
  currencies: [
    {
      code: string
      name: string
      symbol: string
    }
  ]
  languages: [
    {
      name: string
    }
  ]
  borders: string[]
  flags: {
    svg: string
    png: string
  }
  alpha3Code: string
}

type Props = {
  countries: CountryData[]
}

const Home = ({ countries }: Props) => {
  const [filter, setFilter] = useState<string>('')
  const [regionFilter, setRegionFilter] = useState<string>('')
  const [selectToggle, setSelectToggle] = useState<boolean>(false)
  const [displayCountries, setDispayCountries] =
    useState<CountryData[]>(countries)

  const { darkMode } = useContext(DarkModeContext)

  const handleFilterInput = (e: React.ChangeEvent<HTMLInputElement>) => {
    setFilter(e.target.value)
  }

  const handleRegionFilter = (e: React.MouseEvent<HTMLSpanElement>) => {
    const target = e.target as HTMLSpanElement
    const region = target.firstChild
    if (region instanceof Text) {
      setRegionFilter(region.data)
    }
    setSelectToggle(false)
  }

  useEffect(() => {
    if (filter !== '') {
      const filteredCountries = countries.filter((country) =>
        country.name.toLowerCase().match(filter.toLowerCase())
      )
      setDispayCountries(filteredCountries)
    } else {
      setDispayCountries(countries)
    }
    if (regionFilter !== '' && filter === '') {
      const filteredCountries = countries.filter((country) =>
        country.region.toLowerCase().match(regionFilter.toLowerCase())
      )
      setDispayCountries(filteredCountries)
    }
  }, [filter, countries, regionFilter])

  return (
    <>
      <GlobalStyle darkmode={darkMode.toString()} font={font} />
      <Head>
        <title>Countries API</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
      </Head>
      <main>
        <div className="container">
          <S.FiltersContainerPrincipal>
            <S.SearchContainer darkmode={darkMode.toString()}>
              {darkMode ? (
                <Image
                  src={searchIconDarnk}
                  alt="Search Icon"
                  width={18}
                  height={18}
                />
              ) : (
                <Image
                  src={searchIconLight}
                  alt="Search Icon"
                  width={18}
                  height={18}
                />
              )}
              <input
                onChange={handleFilterInput}
                type="text"
                placeholder="Search for a countryâ€¦"
                value={filter}
              />
            </S.SearchContainer>
            <S.FilterByRegionContainer>
              <S.SelectContainer darkmode={darkMode.toString()}>
                <span>Filter by Region</span>
                <S.ArrowDownImageContainer
                  onClick={() => setSelectToggle(!selectToggle)}
                >
                  {darkMode ? (
                    <Image
                      src={arrowDownDark}
                      alt="arrow down Icon"
                      width={9}
                      height={6}
                    />
                  ) : (
                    <Image
                      src={arrowDownLight}
                      alt="arrow down Icon"
                      width={9}
                      height={6}
                    />
                  )}
                </S.ArrowDownImageContainer>
              </S.SelectContainer>
              <S.OptionsDiv
                selecttoggle={selectToggle.toString()}
                darkmode={darkMode.toString()}
              >
                <span onClick={handleRegionFilter}>Africa</span>
                <span onClick={handleRegionFilter}>America</span>
                <span onClick={handleRegionFilter}>Asia</span>
                <span onClick={handleRegionFilter}>Europe</span>
                <span onClick={handleRegionFilter}>Oceania</span>
              </S.OptionsDiv>
            </S.FilterByRegionContainer>
          </S.FiltersContainerPrincipal>
          <S.AllCardContainer>
            {displayCountries.map((country: CountryData) => (
              <Card key={country.name} country={country} />
            ))}
          </S.AllCardContainer>
        </div>
      </main>
    </>
  )
}

export default Home

export const getStaticProps = async () => {
  const filePath = path.join(process.cwd(), 'data', 'data.json')
  const jsonData = await fs.readFile(filePath)
  const jsonString: string = jsonData.toString('utf8')
  const data = JSON.parse(jsonString)

  return {
    props: {
      countries: data
    }
  }
}
